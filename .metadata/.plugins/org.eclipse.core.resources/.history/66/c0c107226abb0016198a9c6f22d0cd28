// this code receives input from the user and returns the answer to expressions
package fracCalc;

import java.util.Scanner;

public class Checkpoint3 {
	public static void main(String[] args) 
    {
        // TODO: Read the input from the user and call produceAnswer with an equation
		Scanner userInput = new Scanner(System.in);
    	String inputEquation = "";
    	System.out.println("Enter an equation: ");
		inputEquation = userInput.nextLine();
		
		//continue prompting user for expression until the user types quit.
    	while(!inputEquation.equals("quit")){
    		String secondPart = produceAnswer(inputEquation);
        	System.out.println(secondPart);
        	System.out.println("Enter an equation: ");
    		inputEquation = userInput.nextLine();
    	}
    }
    
	
	
    public static String produceAnswer(String input)
    { 
        // TODO: Implement this function to produce the solution to the input
    	
    	//splits equation into first part, operator and second part
    	String[] parsedExpression = parseInput(input);
    	String firstPart = parsedExpression[0];
    	String operator = parsedExpression[1];
    	String secPart = parsedExpression[2];
    	
    	//parse first and second parts(fractions into whole number, numerator and denominator)
    	int[] firstPartParsed = parseFraction(firstPart);
    	int whole = firstPartParsed[0];
    	int numerator = firstPartParsed[1];
    	int denominator = firstPartParsed[2];
    	
    	int[] secPartParsed = parseFraction(secPart);
    	int secPartWhole = secPartParsed[0];
    	int secPartNumerator = secPartParsed[1];
    	int secPartDenominator = firstPartParsed[2];
    	
    	//change first and second parsed parts into improper fractions
    	int[] firstPartImproper = improperFrac(firstPartParsed);
    	int[] secPartImproper = improperFrac(secPartParsed);
    	
    	//perform add or multiply based on operator
    	if(operator.equals("+")  || operator.equals("-")){
    		String sumAnswer = addFrac(firstPartImproper, secPartImproper, operator);
    		return sumAnswer;
    	}
    	if(operator.equals("*")  || operator.equals("/")){
    		String productAnswer = multiplyFrac(firstPartImproper, secPartImproper);
    		return productAnswer;
    	}
    	return "wrong";
    }
    
    
    
    public static String[] parseInput(String expression){
    	String[] noSpaces = expression.split(" ");
    	return noSpaces;
    }
    
    
    
    public static int[] parseFraction(String fraction){
    	// initialize the whole, numerator, denominator and numAndDen values.
    	String whole = "0";
    	String numerator = "0";
    	String denominator = "1";
    	String numAndDen = "";
    	
    	//split fraction into whole number and fraction
    	//if "_" exists, split into whole number and fraction
    	if(fraction.indexOf("_") != -1){
    		String[] splitFraction = fraction.split("_");
        	whole = splitFraction[0];
        	numAndDen = splitFraction[1];
        //if "_" doesn't exist, check for "/"
        //if "/" doesn't exist, the fraction is the whole number
        //if "/" does exist the fraction is the numerator and denominator.
    	}else if(fraction.indexOf("/") == -1){
    		whole = fraction;
    	}else{
    		numAndDen = fraction;
    	}
    	
    	//split fraction into numerator and denominator
    	if(numAndDen.indexOf("/") != -1){
    		String[] splitNumandDen = numAndDen.split("/");
        	numerator = splitNumandDen[0];
        	denominator = splitNumandDen[1];
    	}
    	//change all values from strings into integers
    	int intWhole = Integer.parseInt(whole);
    	int intNumerator = Integer.parseInt(numerator);
    	int intDenominator = Integer.parseInt(denominator);

    	int[] fracArray = {intWhole, intNumerator, intDenominator};
    	return fracArray;
    }
    
    
    
    public static int[] improperFrac(int[] wholeNumDenArray){
    	//initialize whole, numerator and denominator
    	int whole = wholeNumDenArray[0];
    	int numerator = wholeNumDenArray[1];
    	int denominator = wholeNumDenArray[2];
    	
    	//new improper fraction array
    	int[] improperFraction = new int[2];
    	improperFraction[0] = (whole*denominator) + numerator;
    	improperFraction[1] = denominator;
    	
    	return improperFraction;                                                                                                         
    }
    
    
    
    public static String addFrac(int[] firstFracToAdd, int[] secFracToAdd, String operator){
    	// add numerators together, leave denominator the same.
		int[] sum = new int[2];
    	if(operator.equals("+")){
        	sum[0] = firstFracToAdd[0] += secFracToAdd[0];
        	sum[1] = firstFracToAdd[1];
    	}else{
        	sum[0] = firstFracToAdd[0] -= secFracToAdd[0];
        	sum[1] = firstFracToAdd[1];
    	}
    	
    	
    	return Integer.toString(sum[0]) + "/" + Integer.toString(sum[1]);
    }
    
    
    
    public static String multiplyFrac(int[] firstFracToMultiply, int[] secFracToMultiply){
    	int[] product = new int[2];
    	product[0] = firstFracToMultiply[0]*secFracToMultiply[0];
    	product[1] = firstFracToMultiply[1]*secFracToMultiply[1];
    	return Integer.toString(product[0]) + "/" + Integer.toString(product[1]);
	}
}